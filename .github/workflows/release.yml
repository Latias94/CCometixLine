name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: ccline-linux-x64.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: ccline-linux-x64-static.tar.gz
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            name: ccline-windows-x64.zip
          - target: x86_64-apple-darwin
            os: macos-latest
            name: ccline-macos-x64.tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            name: ccline-macos-arm64.tar.gz

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package Linux/macOS
      if: matrix.os != 'windows-latest' && matrix.target != 'x86_64-pc-windows-gnu'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/ccometixline dist/ccline
        cd dist
        tar czf ../${{ matrix.name }} ccline

    - name: Package Windows
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/ccometixline.exe dist/ccline.exe
        cd dist
        zip ../${{ matrix.name }} ccline.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*
        generate_release_notes: true
        draft: false
        prerelease: false

    - name: Extract binaries from archives
      run: |
        mkdir -p extracted
        
        # macOS x64
        tar -xzf artifacts/ccline-macos-x64.tar.gz/ccline-macos-x64.tar.gz -C extracted
        mv extracted/ccline extracted/ccline-darwin-x64
        
        # macOS ARM64
        tar -xzf artifacts/ccline-macos-arm64.tar.gz/ccline-macos-arm64.tar.gz -C extracted
        mv extracted/ccline extracted/ccline-darwin-arm64
        
        # Linux x64
        tar -xzf artifacts/ccline-linux-x64.tar.gz/ccline-linux-x64.tar.gz -C extracted
        mv extracted/ccline extracted/ccline-linux-x64
        
        # Linux musl (static)
        tar -xzf artifacts/ccline-linux-x64-static.tar.gz/ccline-linux-x64-static.tar.gz -C extracted
        mv extracted/ccline extracted/ccline-linux-x64-musl
        
        # Windows
        unzip artifacts/ccline-windows-x64.zip/ccline-windows-x64.zip -d extracted
        mv extracted/ccline.exe extracted/ccline-win32-x64.exe
        
        # List extracted files
        ls -la extracted/
